import{_ as c,o as t,c as s,V as i,J as r,m as a,a as o}from"./chunks/framework.sSp7RsiA.js";const d={},n={class:"sticky-wrapper"},f=i('<h2 data-v-76f3a847>css 新特性 —— sticky</h2><p data-v-76f3a847> 对于设置了 position: sticky 的元素来说，本文我暂且描述成“粘性定位元素”，要满足以下条件才会产生所谓的“粘性”： </p><div class="sticky-top" data-v-76f3a847>当你到达我的滚动位置时我会粘在屏幕上</div><ul data-v-76f3a847><li data-v-76f3a847>一定要设置方位属性（top/left/bottom/right）</li><li data-v-76f3a847>粘性定位元素（不含 margin）与其最近的一个祖先 scrolling box（含 border,padding）的距离，小于等于设定的方位属性阈值。如果没有拥有 scrolling box 的话会根据 viewport 来计算</li><li data-v-76f3a847>怎么判断是否达到阈值，是根据这个做判断的 scrolling box 的滚动事件确定的，言外之意即，该 scrolling box 一定可滚动（在你设定的方向属性的方向上，如你要垂直滚动时固定，就垂直方向一定要可滚动），只有滚动了监听到了才会生效（`意味着如果设置了 overflow: hidden 是不起效的`），而且，不会受到其他祖先 scrolling box 的滚动影响。</li><li data-v-76f3a847>父元素可视区域能容纳下粘性定位元素。一般发生在父元素不是滚动容器时。这点具体下面会说明一个情况。</li><p data-v-76f3a847>我们汇总以及简化下上面条件的描述：</p><p data-v-76f3a847>粘性定位元素要位于一个可滚动容器里，且一定要设置方向属性，该值用作与最近的一个祖先 scrolling box 的距离做比较，小于等于时生效。但是其父元素在滚动的影响下，如果可视区域容纳不下该粘性定位元素时，则粘性同样会消失。</p><h2 data-v-76f3a847>传统实现</h2><ul data-v-76f3a847><li data-v-76f3a847>主要是让 body 成为滚动容器，即滚动条所属的元素。</li><li data-v-76f3a847>left-section 和 right-section 各占页面的左右两边</li><li data-v-76f3a847>导航栏.nav-bar 被一个父元素 nav-bar-wrap 包裹，目的是占位！当导航栏.nav-bar 吸顶后，设置了 position: fixed，脱离了文档流，如果没有这个父元素占位，页面的内容就会往上填补这个空缺，且，吸顶效果的瞬间页面很不流畅！</li><li data-v-76f3a847>.right-section 设置了 position 了，成为了导航内容和导航栏的 offsetParent 了，并不是滚动容器 body 了，这个是要注意的，且 body 设置了 padding-top: 24px 了。</li></ul><div class="sticky-bottom" data-v-76f3a847>没滚动到位置时也会展示</div><h2 data-v-76f3a847>二者结合</h2><p data-v-76f3a847> 二者结合的意思是，根据浏览器是否支持sticky，来判断使用css方式的吸顶效果，还是js控制吸顶。 </p><p data-v-76f3a847>不过说句实话，除非你明确知道你开发的页面是应用在哪个浏览器上（或者有这个需求），这样的话你在开发时就只写合适的那段代码就好了。</p><p data-v-76f3a847>但是如果你自己也不确定是应用在什么浏览器上，或者说本来是要适应大部分浏览器的话，二者结合的方案并不会省去写代码的功夫，就是说两个实现方式都要写，还要写判断，实际用哪个方式。这样做意义仅仅是，能使用css的就用css尽量减少dom操作，是性能上的优化。如果你没有这个追求的话，其实完全可以写传统的。</p></ul>',4),p=[f];function _(e,l){return t(),s("div",n,p)}const h=c(d,[["render",_],["__scopeId","data-v-76f3a847"]]),v=a("h1",{id:"sticky-粘黏布局",tabindex:"-1"},[o("Sticky 粘黏布局 "),a("a",{class:"header-anchor",href:"#sticky-粘黏布局","aria-label":'Permalink to "Sticky 粘黏布局"'},"​")],-1),k=a("h2",{id:"position-sticky",tabindex:"-1"},[o("position: sticky "),a("a",{class:"header-anchor",href:"#position-sticky","aria-label":'Permalink to "position: sticky"'},"​")],-1),m=a("p",null,[a("strong",null,"如果不考虑兼容性情况下，强烈建议使用css实现，少写好多代码")],-1),u=i("",6),g=JSON.parse('{"title":"Sticky 粘黏布局","description":"","frontmatter":{},"headers":[],"relativePath":"编写代码/01htmlcss/c_css_3-sticky/c_css_3-sticky.md","filePath":"编写代码/01htmlcss/c_css_3-sticky/c_css_3-sticky.md","lastUpdated":1719832369000}'),b={name:"编写代码/01htmlcss/c_css_3-sticky/c_css_3-sticky.md"},T=Object.assign(b,{setup(e){return(l,y)=>(t(),s("div",null,[v,k,m,r(h),u]))}});export{g as __pageData,T as default};
